import streamlit as st

def show_about():

    st.markdown("""
    <h1 style='color: #007BFF;'>Sobre o Projeto</h1>
    <p style='color: #FFFFFF;'>Este projeto visa detectar fake news utilizando t√©cnicas de Processamento de Linguagem Natural (NLP) e aprendizado de m√°quina. O modelo foi treinado com not√≠cias rotuladas como verdadeiras ou falsas para ajudar na identifica√ß√£o e combate √† desinforma√ß√£o. üì∞ü§ñ</p>
    
    <h2 style='color: #007BFF;'>Funcionalidades:</h2>
    <p style='color: #FFFFFF;'> 
    Detec√ß√£o em Tempo Real: O modelo pode processar e analisar textos rapidamente, classificando se a not√≠cia √© verdadeira ou falsa. üïµÔ∏è‚Äç‚ôÇÔ∏èüñ•Ô∏è<br>
    Porcentagem de Certeza: O aplicativo exibe a porcentagem de confian√ßa da previs√£o, mostrando o qu√£o seguro o modelo est√° em sua classifica√ß√£o. üìäü§ñ
    </p>

    <h2 style='color: #007BFF;'>Instru√ß√µes de Uso:</h2>
    <p style='color: #FFFFFF;'> 
    1. Insira o texto ou not√≠cia que deseja verificar.<br>
    2. Aguarde o processamento e obtenha a classifica√ß√£o do modelo (Verdadeira ou Falsa).<br>
    3. Confira a porcentagem de confian√ßa associada √† previs√£o e analise o resultado. üñ•Ô∏è‚öôÔ∏è
    </p>

    <h2 style='color: #007BFF;'>Tecnologias Utilizadas:</h2>
    <p style='color: #FFFFFF;'> 
    Este aplicativo foi desenvolvido utilizando as seguintes tecnologias:<br>
    - Streamlit: Biblioteca para cria√ß√£o de interfaces web interativas usando Python.<br>
    - Scikit-learn: Utilizada para o treinamento dos modelos de classifica√ß√£o.<br>
    - NLTK e spaCy: Bibliotecas de NLP utilizadas para pr√©-processamento e an√°lise de texto.<br>
    - Pandas: Usada para manipula√ß√£o e an√°lise de dados.<br>
    - TensorFlow/Keras: Utilizados para construir e treinar modelos de deep learning, incluindo LSTM e CNN para detec√ß√£o de padr√µes complexos em textos. ü§ñüß†
    </p>

    <h2 style='color: #007BFF;'>Desenvolvedor:</h2>
    <p style='color: #FFFFFF;'> 
    Este aplicativo foi desenvolvido por Thaleson Silva. Sou entusiasta de intelig√™ncia artificial e NLP, e este projeto busca contribuir para a verifica√ß√£o de fatos e o combate √† desinforma√ß√£o. üöÄ<br>
    Agradecemos seu uso e ficamos abertos a feedbacks para melhorar o sistema. üôå
    </p>

    <h2 style='color: #007BFF;'>Como o Modelo Foi Treinado:</h2>
    <p style='color: #FFFFFF;'> 
    O modelo de detec√ß√£o de fake news foi treinado com um conjunto de dados de not√≠cias rotuladas como verdadeiras ou falsas, seguindo estas etapas:</p>
    
    <h3 style='color: #007BFF;'>1. Pr√©-processamento dos Dados:</h3>
    <p style='color: #FFFFFF;'> 
    O texto foi tokenizado, e foram removidas stop words e pontua√ß√£o. Abaixo est√° um exemplo de c√≥digo de pr√©-processamento com NLTK:
    </p>

    ```python
    import nltk
    from nltk.corpus import stopwords
    from nltk.tokenize import word_tokenize
    import string

    # Fun√ß√£o para pr√©-processamento de texto
    def preprocess_text(text):
        stop_words = set(stopwords.words('portuguese'))
        tokens = word_tokenize(text)
        tokens = [word.lower() for word in tokens if word.isalpha() and word not in stop_words]
        return tokens
    ```

    <h3 style='color: #007BFF;'>2. Treinamento do Modelo:</h3>
    <p style='color: #FFFFFF;'> 
    Modelos como Regress√£o Log√≠stica, Random Forest e LSTM foram treinados utilizando vetores TF-IDF para representar o texto. O c√≥digo a seguir mostra como os dados foram preparados e o modelo foi treinado:
    </p>

    ```python
    from sklearn.feature_extraction.text import TfidfVectorizer
    from sklearn.model_selection import train_test_split
    from sklearn.linear_model import LogisticRegression

    # Vetoriza√ß√£o e divis√£o dos dados
    vectorizer = TfidfVectorizer(max_features=5000)
    X = vectorizer.fit_transform(text_data)
    X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2, random_state=42)

    # Treinamento de um modelo de Regress√£o Log√≠stica
    model = LogisticRegression()
    model.fit(X_train, y_train)
    ```

    <h3 style='color: #007BFF;'>3. Avalia√ß√£o e Ajuste:</h3>
    <p style='color: #FFFFFF;'> 
    Ap√≥s o treinamento, o modelo foi avaliado usando m√©tricas como precis√£o e recall. A seguir, realizamos ajustes no modelo para melhorar a acur√°cia geral.
    </p>

    <p style='color: #FFFFFF;'> 
    O c√≥digo acima resume o processo de pr√©-processamento, treinamento e avalia√ß√£o do modelo. O uso de t√©cnicas de NLP e aprendizado de m√°quina permite ao modelo identificar padr√µes em textos e detectar not√≠cias falsas de forma eficaz.
    </p>
    """, unsafe_allow_html=True)

